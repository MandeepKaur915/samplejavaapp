pipeline {
    agent any
    environment {
       qg = "waitForQualityGate()"
    }
     stages {
        stage('checkout') {
            steps {
                checkout([$class: 'GitSCM', branches: [[name: '*/master']], extensions: [], userRemoteConfigs: [[url: 'https://github.com/MandeepKaur915/samplejavaapp.git']]])  
            }
        }
         stage ("build jar") {
            steps {
                sh "mvn clean install"
            }
        }
        stage('quality analysis'){
            steps{
                withSonarQubeEnv('SonarQube'){
                sh "mvn sonar:sonar"
                }
            }
        }
        stage("Quality Gate") {
             steps {
                timeout(time: 3, unit: 'MINUTES') {
                    steps {
                       if (qg.status != 'OK') {
                          error "Pipeline aborted due to quality gate failure: ${qg.status}"
                       }
                    }
                }
             }
        }
        stage('upload to nexus') {
            steps {
                nexusArtifactUploader artifacts: [
                     [
                        artifactId: 'sampleapp', 
                        classifier: '', 
                        file: 'target/sampleapp.war', 
                        type: 'war'
                    ]
                ], 
                credentialsId: 'nexus3', 
                groupId: 'com.devopsdemo.tutorial', 
                nexusUrl: 'http://34.231.241.101:8081/', 
                nexusVersion: 'nexus3', 
                protocol: 'http', 
                repository: 'http://34.231.241.101:8081/repository/pipe-repo/', 
                version: '2.0'
            }
         }
         stage('deploy') {
            steps {
                ansiblePlaybook credentialsId: 'private-key', disableHostKeyChecking: true, installation: 'ansible', inventory: 'hosts.yaml', playbook: 'newplaybook.yaml'
            }
        }
     }
}





to push image with credential :

 stage('Pushing to dockerhub') {
            steps{  
                withCredentials([string(credentialsId: 'dockerhub', variable: 'docker-hub')]) {
                    sh "docker login -u itsmandymaan -p ${docker-hub}"
                }
                sh "docker push itsmandymaan/demo:v1"
            }
        }
        
        
        
